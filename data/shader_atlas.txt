//example of some shaders compiled
flat basic.vs flat.fs
texture basic.vs texture.fs
depth quad.vs depth.fs
multi basic.vs multi.fs
phong basic.vs phong.fs

// --------------------------------------------------------------------------

\getTextureUniforms
uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;
uniform float u_tiles_number;

// --------------------------------------------------------------------------

\getColor
vec2 uv = v_uv;
vec4 color = u_color;
color *= texture2D( u_texture, uv * u_tiles_number);

if(color.a < u_alpha_cutoff)
	discard;

// --------------------------------------------------------------------------

\basic.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_uv;
in vec4 a_color;

uniform vec3 u_camera_pos;

uniform mat4 u_model;
uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;
out vec4 v_color;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( v_position, 1.0) ).xyz;
	
	//store the color in the varying var to use it from the pixel shader
	v_color = a_color;

	//store the texture coordinates
	v_uv = a_uv;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}

\quad.vs

#version 330 core

in vec3 a_vertex;
in vec2 a_uv;
out vec2 v_uv;

void main()
{	
	v_uv = a_uv;
	gl_Position = vec4( a_vertex, 1.0 );
}


\flat.fs

#version 330 core

uniform vec4 u_color;

out vec4 FragColor;

void main()
{
	FragColor = u_color;
}


\texture.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, uv );
	if(color.a < u_alpha_cutoff)
		discard;

	FragColor = color;
}


\multi.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 NormalColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 N = normalize(v_normal);

	FragColor = color;
	NormalColor = vec4(N,1.0);
}


\depth.fs

#version 330 core

uniform vec2 u_camera_nearfar;
uniform sampler2D u_texture; //depth map
in vec2 v_uv;
out vec4 FragColor;

void main()
{
	float n = u_camera_nearfar.x;
	float f = u_camera_nearfar.y;
	float z = texture2D(u_texture,v_uv).x;
	float color = n * (z + 1.0) / (f + n - z * (f - n));
	FragColor = vec4(color);
}


\instanced.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_uv;

in mat4 u_model;

uniform vec3 u_camera_pos;

uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( a_vertex, 1.0) ).xyz;
	
	//store the texture coordinates
	v_uv = a_uv;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}


// ----------------------------------------------------------------------

\phong.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

in mat4 u_model;

uniform vec3 u_camera_pos;
uniform mat4 u_viewprojection;

uniform vec3 u_ambient_light;
uniform sampler2D u_occlusion_texture;
uniform bool u_has_occlusion_texture;
uniform sampler2D u_emissive_texture;
uniform bool u_has_emissive_texture;

uniform vec3 u_light_color;
uniform int u_light_type;
uniform vec3 u_light_direction;
uniform vec3 u_light_position;
uniform float u_light_maxdist;
uniform float u_light_intensity;
uniform vec3 u_light_spotDirection;
uniform float u_light_spotCosineCutoff;
uniform float u_light_spotExponent;
uniform bool u_is_first_pass;

uniform sampler2D u_shadowmap;
uniform mat4 u_shadow_viewproj;
uniform float u_shadow_bias;
uniform bool u_cast_shadows;

uniform int u_shadowmap_res;
#define NUM_FACES 6
uniform mat4 u_shadowmap_viewprojs[6];

#include "getTextureUniforms"

//this will store the color for the pixel shader
out vec4 FragColor;

vec3 getDirectionalLight(vec3 N)
{
	//if the light is a directional light the light vector is the same for all pixels
	vec3 L = normalize(-u_light_direction);	//light vector goes in opposite direction
		
	//compute how much is aligned
	float NdotL = dot(N,L);

	//light cannot be negative (but the dot product can)
	NdotL = clamp( NdotL, 0.0, 1.0 );
	
	return NdotL * u_light_color * u_light_intensity;
}

vec3 getPointLight(float NdotL)
{	
	//compute distance
	float light_distance = length(u_light_position - v_world_position);

	//compute a linear attenuation factor
	float att_factor = u_light_maxdist - light_distance;

	//normalize factor
	att_factor /= u_light_maxdist;

	//ignore negative values
	att_factor = max( att_factor, 0.0 );
	
	//quadratic att factor
	att_factor *= att_factor;

	//apply to amount of light
	return ( NdotL * u_light_color) * att_factor * u_light_intensity;
}

vec3 getAmbientColor(vec2 uv)
{
	vec3 ambient_color = u_ambient_light;
	
	if (u_has_occlusion_texture)
		ambient_color *= texture2D( u_occlusion_texture, uv * u_tiles_number).x;
	return ambient_color;
}

float getShadowFactorPointLight()
{
	float shadow_factor = 1.0;
	const float i_offset = 1.0 / 6.0;
	for (int i = 0; i < 6; i++) {
		
		mat4 shadowmap_viewproj = mat4(1.0);
		vec4 proj_pos = u_shadowmap_viewprojs[i] * vec4(v_world_position,1.0);
		vec2 shadow_uv = proj_pos.xy / proj_pos.w;
		shadow_uv = shadow_uv * 0.5 + vec2(0.5);
		//it is outside on the sides, try next face
		if(shadow_uv.x < 0.0 || shadow_uv.x > 1.0 || shadow_uv.y < 0.0 || shadow_uv.y > 1.0)
			continue;

		shadow_uv.x *= i_offset;
		shadow_uv.x += i_offset * float(i);
		
		float real_depth = (proj_pos.z - u_shadow_bias) / proj_pos.w;
		real_depth = real_depth * 0.5 + 0.5;
		
		float shadow_depth = texture2D(u_shadowmap, shadow_uv).x;

		if(real_depth < 0.0 || real_depth > 1.0)
			shadow_factor = 0.0;
		
		if( shadow_depth < real_depth )
			shadow_factor = 0.0;

		break;
	}
	
	return shadow_factor;
	
}

float getShadowFactor(bool add_light_outside)
{
	float out_of_bound_light = 0.0;
	if (add_light_outside) out_of_bound_light = 1.0;
	//project our 3D position to the shadowmap
	vec4 proj_pos = u_shadow_viewproj * vec4(v_world_position,1.0);

	//from homogeneus space to clip space
	vec2 shadow_uv = proj_pos.xy / proj_pos.w;

	//from clip space to uv space
	shadow_uv = shadow_uv * 0.5 + vec2(0.5);

	//get point depth (from -1 to 1)
	float real_depth = (proj_pos.z - u_shadow_bias) / proj_pos.w;

	//normalize from [-1..+1] to [0..+1]
	real_depth = real_depth * 0.5 + 0.5;

	//read depth from depth buffer in [0..+1]
	float shadow_depth = texture2D(u_shadowmap, shadow_uv).x;

	//compute final shadow factor by comparing
	float shadow_factor = 1.0;
	if( shadow_depth < real_depth )
		shadow_factor = 0.0;
	//it is before near or behind far plane
	if(real_depth < 0.0 || real_depth > 1.0)
		shadow_factor = out_of_bound_light;	
	//it is outside on the sides
	if(shadow_uv.x < 0.0 || shadow_uv.x > 1.0 || shadow_uv.y < 0.0 || shadow_uv.y > 1.0)
		shadow_factor = out_of_bound_light;
	
	return shadow_factor;
}

void main()
{	
	
	#include "getColor"
	
	//here we store the total amount of light
	vec3 light = vec3(0.0);
	
	//ambient light
	light += getAmbientColor(uv);

	//normalize as they come interpolated so normalization is lost
	vec3 N = normalize( v_normal );
	
	if( u_light_type == 0 ) {	//directional  light
		//store the amount of diffuse light
		vec3 dir_light = getDirectionalLight(N);
		if (u_cast_shadows)	light += dir_light * getShadowFactor(true);
		else light += dir_light;
	}	
	else //point and spot light
	{
		
		//light vector
		vec3 L = normalize(u_light_position - v_world_position);
		
		//compute how much is aligned
		float NdotL = dot(N,L);
		
		//light cannot be negative (but the dot product can)
		NdotL = clamp( NdotL, 0.0, 1.0 );
		
		if (u_light_type == 1)	{//point light
			vec3 point_light = getPointLight(NdotL);
			if (u_cast_shadows) light += point_light * getShadowFactorPointLight();
			else light += point_light;
		}	
		else	//spot light
		{
			vec3 D = normalize(u_light_direction);
			float spotCosine = dot(D,-L);
			if (spotCosine >= u_light_spotCosineCutoff)
			{
				vec3 spot_light = pow(spotCosine,u_light_spotExponent) * u_light_color * u_light_intensity * NdotL;
				if (u_cast_shadows) light += spot_light * getShadowFactor(false);
				else light += spot_light;
			}
		}
	}
	
	color.xyz *= light;
	
	//emissive light
	if (u_has_emissive_texture && u_is_first_pass)
		color.xyz += texture2D( u_emissive_texture, uv * u_tiles_number).xyz;
	
	FragColor = color;
}